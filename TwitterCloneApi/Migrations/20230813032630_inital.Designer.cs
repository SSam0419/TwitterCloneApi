// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TwitterCloneApi.Data;

#nullable disable

namespace TwitterCloneApi.Migrations
{
    [DbContext(typeof(ContextApi))]
    [Migration("20230813032630_inital")]
    partial class inital
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CommentUser", b =>
                {
                    b.Property<string>("CommentId")
                        .HasColumnType("text");

                    b.Property<string>("LikesId")
                        .HasColumnType("character varying(30)");

                    b.HasKey("CommentId", "LikesId");

                    b.HasIndex("LikesId");

                    b.ToTable("CommentUser");
                });

            modelBuilder.Entity("TweetUser", b =>
                {
                    b.Property<string>("LikesId")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("TweetId")
                        .HasColumnType("text");

                    b.HasKey("LikesId", "TweetId");

                    b.HasIndex("TweetId");

                    b.ToTable("TweetUser");
                });

            modelBuilder.Entity("TwitterCloneApi.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TweetId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TweetId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("TwitterCloneApi.Models.Tweet", b =>
                {
                    b.Property<string>("TweetId")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TweetId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Tweet");
                });

            modelBuilder.Entity("TwitterCloneApi.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("IconLink")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("TwitterCloneApi.Models.UserConfidentials", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Salt")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("UserConfidentials");
                });

            modelBuilder.Entity("TwitterCloneApi.Models.UserFollowed", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("FollowedUserId")
                        .HasColumnType("character varying(30)");

                    b.HasKey("UserId", "FollowedUserId");

                    b.HasIndex("FollowedUserId");

                    b.ToTable("UserFollowed");
                });

            modelBuilder.Entity("TwitterCloneApi.Models.UserFollowings", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("FollowingUserId")
                        .HasColumnType("character varying(30)");

                    b.HasKey("UserId", "FollowingUserId");

                    b.HasIndex("FollowingUserId");

                    b.ToTable("UserFollowings");
                });

            modelBuilder.Entity("CommentUser", b =>
                {
                    b.HasOne("TwitterCloneApi.Models.Comment", null)
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterCloneApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("LikesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TweetUser", b =>
                {
                    b.HasOne("TwitterCloneApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("LikesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterCloneApi.Models.Tweet", null)
                        .WithMany()
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterCloneApi.Models.Comment", b =>
                {
                    b.HasOne("TwitterCloneApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwitterCloneApi.Models.Tweet", "Tweet")
                        .WithMany("Comments")
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tweet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterCloneApi.Models.Tweet", b =>
                {
                    b.HasOne("TwitterCloneApi.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TwitterCloneApi.Models.UserConfidentials", b =>
                {
                    b.HasOne("TwitterCloneApi.Models.User", "User")
                        .WithOne("UserConfidentials")
                        .HasForeignKey("TwitterCloneApi.Models.UserConfidentials", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterCloneApi.Models.UserFollowed", b =>
                {
                    b.HasOne("TwitterCloneApi.Models.User", "FollowedUser")
                        .WithMany()
                        .HasForeignKey("FollowedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TwitterCloneApi.Models.User", "User")
                        .WithMany("Followed")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FollowedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterCloneApi.Models.UserFollowings", b =>
                {
                    b.HasOne("TwitterCloneApi.Models.User", "FollowingUser")
                        .WithMany()
                        .HasForeignKey("FollowingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TwitterCloneApi.Models.User", "User")
                        .WithMany("Followings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FollowingUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterCloneApi.Models.Tweet", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("TwitterCloneApi.Models.User", b =>
                {
                    b.Navigation("Followed");

                    b.Navigation("Followings");

                    b.Navigation("UserConfidentials")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
